package main

{{ $name := .Name }}
{{ $operations := .Operations }}
import (
    "github.com/MarlikAlmighty/{{ dasherize .Name }}/internal/app"
	"github.com/MarlikAlmighty/{{ dasherize .Name }}/internal/gen/restapi"
	"github.com/MarlikAlmighty/{{ dasherize .Name }}/internal/gen/restapi/operations"
	{{range $index, $op := .Operations}}
        {{ $found := false }}
        {{ range $i, $sop := $operations }}
            {{ if and (gt $i $index ) (eq $op.Package $sop.Package)}}
                {{ $found = true }}
            {{end}}
        {{end}}
        {{ if not $found }}
        api{{ pascalize $op.Package }} "{{$op.GenCommon.TargetImportPath}}/{{ $op.RootPackage }}/operations/{{ $op.Package }}"
        {{end}}
    {{end}}

	"github.com/go-openapi/loads"
)

func main() {

	myApp, err := app.New()
	if err != nil {
		panic(err)
	}

	swaggerSpec, err := loads.Analyzed({{ .APIPackage }}.SwaggerJSON, "")
	if err != nil {
		myApp.Logger.Fatalw("error loads analyzed:", err)
	}

	api := operations.New{{ pascalize .Name }}API(swaggerSpec)

	{{range .Operations}}
    api.{{ pascalize .Package }}{{ pascalize .Name }}Handler = api{{ pascalize .Package }}.{{ pascalize .Name }}HandlerFunc(myApp.{{ pascalize .Name }}Handler)
    {{- end}}

	server := {{ .APIPackage }}.NewServer(api)

	defer func() {
    		myApp.Stop()
    		if err := server.Shutdown(); err != nil {
    			myApp.Logger.Infof("error shutdown server: %s", err)
    		}
    	}()

	server.ConfigureAPI()

	server.Port = myApp.Conf.HTTPPort

    if err := server.Serve(); err != nil {
       myApp.Logger.Fatalw("error start server:", err)
    }
}
