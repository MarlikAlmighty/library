// Code generated by go-swagger; DO NOT EDIT.

package bookcases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MarlikAlmighty/library/pkg/models"
)

// AddBookcaseReader is a Reader for the AddBookcase structure.
type AddBookcaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddBookcaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddBookcaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddBookcaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddBookcaseOK creates a AddBookcaseOK with default headers values
func NewAddBookcaseOK() *AddBookcaseOK {
	return &AddBookcaseOK{}
}

/* AddBookcaseOK describes a response with status code 200, with default header values.

OK
*/
type AddBookcaseOK struct {
}

func (o *AddBookcaseOK) Error() string {
	return fmt.Sprintf("[POST /bookcases][%d] addBookcaseOK ", 200)
}

func (o *AddBookcaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddBookcaseBadRequest creates a AddBookcaseBadRequest with default headers values
func NewAddBookcaseBadRequest() *AddBookcaseBadRequest {
	return &AddBookcaseBadRequest{}
}

/* AddBookcaseBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddBookcaseBadRequest struct {
	Payload *models.Fail
}

func (o *AddBookcaseBadRequest) Error() string {
	return fmt.Sprintf("[POST /bookcases][%d] addBookcaseBadRequest  %+v", 400, o.Payload)
}
func (o *AddBookcaseBadRequest) GetPayload() *models.Fail {
	return o.Payload
}

func (o *AddBookcaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
