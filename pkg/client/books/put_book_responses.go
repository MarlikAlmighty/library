// Code generated by go-swagger; DO NOT EDIT.

package books

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/MarlikAlmighty/library/pkg/models"
)

// PutBookReader is a Reader for the PutBook structure.
type PutBookReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutBookReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutBookOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutBookBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutBookOK creates a PutBookOK with default headers values
func NewPutBookOK() *PutBookOK {
	return &PutBookOK{}
}

/* PutBookOK describes a response with status code 200, with default header values.

OK
*/
type PutBookOK struct {
}

func (o *PutBookOK) Error() string {
	return fmt.Sprintf("[PUT /books][%d] putBookOK ", 200)
}

func (o *PutBookOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutBookBadRequest creates a PutBookBadRequest with default headers values
func NewPutBookBadRequest() *PutBookBadRequest {
	return &PutBookBadRequest{}
}

/* PutBookBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PutBookBadRequest struct {
	Payload *models.Fail
}

func (o *PutBookBadRequest) Error() string {
	return fmt.Sprintf("[PUT /books][%d] putBookBadRequest  %+v", 400, o.Payload)
}
func (o *PutBookBadRequest) GetPayload() *models.Fail {
	return o.Payload
}

func (o *PutBookBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Fail)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
