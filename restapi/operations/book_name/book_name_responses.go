// Code generated by go-docs; DO NOT EDIT.

package book_name

// This file was generated by the docs tool.
// Editing this file might prove futile when you re-run the docs generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/MarlikAlmighty/library/models"
)

// BookNameOKCode is the HTTP code returned for type BookNameOK
const BookNameOKCode int = 200

/*BookNameOK Successful response

docs:response bookNameOK
*/
type BookNameOK struct {

	/*
	  In: Body
	*/
	Payload *models.Book `json:"body,omitempty"`
}

// NewBookNameOK creates BookNameOK with default headers values
func NewBookNameOK() *BookNameOK {

	return &BookNameOK{}
}

// WithPayload adds the payload to the book name o k response
func (o *BookNameOK) WithPayload(payload *models.Book) *BookNameOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the book name o k response
func (o *BookNameOK) SetPayload(payload *models.Book) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BookNameOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// BookNameBadRequestCode is the HTTP code returned for type BookNameBadRequest
const BookNameBadRequestCode int = 400

/*BookNameBadRequest Bad request

docs:response bookNameBadRequest
*/
type BookNameBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Fail `json:"body,omitempty"`
}

// NewBookNameBadRequest creates BookNameBadRequest with default headers values
func NewBookNameBadRequest() *BookNameBadRequest {

	return &BookNameBadRequest{}
}

// WithPayload adds the payload to the book name bad request response
func (o *BookNameBadRequest) WithPayload(payload *models.Fail) *BookNameBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the book name bad request response
func (o *BookNameBadRequest) SetPayload(payload *models.Fail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *BookNameBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
