// Code generated by go-swagger; DO NOT EDIT.

package page_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PageIDHandlerFunc turns a function with the right signature into a page ID handler
type PageIDHandlerFunc func(PageIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PageIDHandlerFunc) Handle(params PageIDParams) middleware.Responder {
	return fn(params)
}

// PageIDHandler interface for that can handle valid page ID params
type PageIDHandler interface {
	Handle(PageIDParams) middleware.Responder
}

// NewPageID creates a new http.Handler for the page ID operation
func NewPageID(ctx *middleware.Context, handler PageIDHandler) *PageID {
	return &PageID{Context: ctx, Handler: handler}
}

/* PageID swagger:route GET /page/{id} pageID pageId

Handler for seek page on id

*/
type PageID struct {
	Context *middleware.Context
	Handler PageIDHandler
}

func (o *PageID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPageIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
