// Code generated by go-swagger; DO NOT EDIT.

package page_id

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/MarlikAlmighty/library/models"
)

// PageIDOKCode is the HTTP code returned for type PageIDOK
const PageIDOKCode int = 200

/*PageIDOK Successful response

swagger:response pageIdOK
*/
type PageIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Page `json:"body,omitempty"`
}

// NewPageIDOK creates PageIDOK with default headers values
func NewPageIDOK() *PageIDOK {

	return &PageIDOK{}
}

// WithPayload adds the payload to the page Id o k response
func (o *PageIDOK) WithPayload(payload *models.Page) *PageIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the page Id o k response
func (o *PageIDOK) SetPayload(payload *models.Page) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PageIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PageIDBadRequestCode is the HTTP code returned for type PageIDBadRequest
const PageIDBadRequestCode int = 400

/*PageIDBadRequest Bad request

swagger:response pageIdBadRequest
*/
type PageIDBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Fail `json:"body,omitempty"`
}

// NewPageIDBadRequest creates PageIDBadRequest with default headers values
func NewPageIDBadRequest() *PageIDBadRequest {

	return &PageIDBadRequest{}
}

// WithPayload adds the payload to the page Id bad request response
func (o *PageIDBadRequest) WithPayload(payload *models.Fail) *PageIDBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the page Id bad request response
func (o *PageIDBadRequest) SetPayload(payload *models.Fail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PageIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
